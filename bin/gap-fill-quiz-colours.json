<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>INTUITY - Gap-Fill Quiz</title>
  <style>
    :root {
      --accent-color: #FF8C42;
      --accent-bg: rgba(255, 140, 66, 0.15);
      --accent-bg-light: rgba(255, 140, 66, 0.08);
      --accent-bg-hover: rgba(255, 140, 66, 0.25);
      --accent-border: rgba(255, 140, 66, 0.3);
      --accent-glow: rgba(255, 140, 66, 0.6);
    }
    
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Text', 'Segoe UI', Roboto, sans-serif;
      background: #0a0a0a;
      min-height: 100vh;
      color: #e5e5e5;
      padding: 1rem;
    }
    
    .color-picker {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 1000;
      display: flex;
      flex-direction: column;
      gap: 0.375rem;
      background: rgba(23, 23, 23, 0.95);
      padding: 0.75rem;
      border-radius: 0.5rem;
      border: 1px solid rgba(64, 64, 64, 0.3);
    }
    
    .color-picker-label {
      font-size: 0.625rem;
      color: #737373;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      text-align: center;
    }
    
    .color-options {
      display: flex;
      gap: 0.5rem;
    }
    
    .color-option {
      width: 2rem;
      height: 2rem;
      border-radius: 50%;
      border: 2px solid transparent;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .color-option:hover {
      transform: scale(1.15);
      border-color: rgba(255, 255, 255, 0.3);
    }
    
    .color-option.active {
      border-color: rgba(255, 255, 255, 0.7);
      box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.15);
      transform: scale(1.1);
    }
    
    .neon-orange { background: linear-gradient(135deg, #FF8C42 0%, #FF6B35 100%); }
    .neon-blue { background: linear-gradient(135deg, #4A9EFF 0%, #2D7FE5 100%); }
    .lilac { background: linear-gradient(135deg, #C8A2E0 0%, #B88DD9 100%); }
    .sage { background: linear-gradient(135deg, #A8C5A4 0%, #8FB28C 100%); }
    .desert { background: linear-gradient(135deg, #c9a88a 0%, #b89572 100%); }
    
    .top-nav {
      max-width: 61.6rem;
      margin: 0 auto 0.5rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 0.5rem;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .nav-link {
      color: #737373;
      background: none;
      border: none;
      cursor: pointer;
      font-size: 0.8125rem;
      text-decoration: none;
      transition: color 0.2s;
    }
    
    .nav-link:hover { color: #a3a3a3; }
    
    .dataset-selector { position: relative; }
    
    .dataset-btn {
      color: #d4d4d4;
      background: var(--accent-bg);
      border: 1px solid var(--accent-border);
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      cursor: pointer;
      font-size: 0.8125rem;
      font-weight: 500;
      transition: all 0.2s;
    }
    
    .dataset-btn:hover { 
      background: var(--accent-bg-hover);
    }
    
    .dataset-dropdown {
      position: absolute;
      top: 100%;
      right: 0;
      margin-top: 0.5rem;
      background: rgba(23, 23, 23, 0.98);
      border: 1px solid rgba(64, 64, 64, 0.4);
      border-radius: 0.5rem;
      padding: 0.375rem;
      min-width: 160px;
      display: none;
      z-index: 1000;
    }
    
    .dataset-dropdown.active { display: block; }
    
    .dataset-option {
      padding: 0.5rem 0.75rem;
      color: #a3a3a3;
      background: none;
      border: none;
      width: 100%;
      text-align: left;
      cursor: pointer;
      font-size: 0.8125rem;
      border-radius: 0.25rem;
      transition: all 0.15s;
    }
    
    .dataset-option:hover {
      background: rgba(64, 64, 64, 0.3);
      color: #e5e5e5;
    }
    
    .dataset-option.active {
      background: var(--accent-bg);
      color: var(--accent-color);
      font-weight: 500;
    }
    
    .container { 
      max-width: 61.6rem;
      margin: 0 auto; 
      padding: 0 1rem 5rem 1rem;
    }
    
    .header { 
      text-align: center; 
      margin-bottom: 2rem;
      padding-top: 1rem;
    }
    
    .header h1 {
      font-size: 2.5rem; 
      font-weight: 600;
      color: #f5f5f5;
      margin-bottom: 0.375rem;
      letter-spacing: -0.03em;
    }
    
    .header .subtitle { 
      font-size: 0.875rem; 
      color: #737373;
    }
    
    .header .author { 
      font-size: 0.75rem; 
      color: #525252;
      margin-top: 0.375rem;
    }
    
    .test-nav { 
      display: flex; 
      align-items: center; 
      justify-content: center;
      gap: 1rem; 
      margin-bottom: 1rem;
    }
    
    .nav-arrow {
      width: 2rem; 
      height: 2rem;
      display: flex; 
      align-items: center; 
      justify-content: center;
      color: #737373;
      cursor: pointer;
      background: transparent;
      border: 1px solid rgba(64, 64, 64, 0.3);
      border-radius: 0.25rem;
      font-size: 0.875rem;
      transition: all 0.2s;
    }
    
    .nav-arrow:hover:not(:disabled) { 
      color: #a3a3a3;
    }
    .nav-arrow:disabled { opacity: 0.2; cursor: not-allowed; }
    
    .dots-container { 
      display: flex; 
      gap: 0.5rem; 
      flex-wrap: wrap;
      justify-content: center;
      max-width: 20rem;
    }
    
    .test-dot { 
      width: 0.625rem; 
      height: 0.625rem; 
      border-radius: 50%; 
      background: rgba(64, 64, 64, 0.4);
      cursor: pointer; 
      transition: all 0.2s;
      border: none;
    }
    
    .test-dot:hover { 
      transform: scale(1.4);
      background: rgba(115, 115, 115, 0.6);
    }
    
    .test-dot.perfect {
      background: #84cc16;
      position: relative;
    }
    
    .test-dot.excellent { background: #86efac; }
    .test-dot.good { background: #7dd3fc; }
    .test-dot.fair { background: #fb923c; }
    .test-dot.poor { background: #ef4444; }
    
    .star-badge {
      position: absolute;
      bottom: -7px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 0.625rem;
      color: #fbbf24;
    }
    
    .test-dot.current { 
      box-shadow: 0 0 0 2px var(--accent-glow);
      transform: scale(1.5);
    }
    
    .test-info { 
      text-align: center;
      font-size: 0.8125rem;
      color: #525252;
      margin-bottom: 1.25rem;
    }
    
    .content-container {
      background: rgba(23, 23, 23, 0.4);
      border-radius: 0.75rem;
      border: 1px solid rgba(64, 64, 64, 0.2);
      padding: 2rem;
      min-height: 400px;
      position: relative;
    }
    
    .mode-toggle {
      position: absolute;
      top: 1.25rem;
      right: 1.25rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #737373;
      background: transparent;
      border: none;
      cursor: pointer;
      font-size: 0.75rem;
      transition: all 0.2s;
      border-radius: 0.375rem;
      padding: 0.5rem 0.75rem;
      font-weight: 500;
    }
    
    .mode-toggle .icon {
      font-size: 1.25rem;
    }
    
    .mode-toggle:hover {
      color: #d4d4d4;
      background: rgba(64, 64, 64, 0.2);
    }
    
    .hidden { display: none !important; }
    
    .text-title {
      font-size: 1.125rem;
      font-weight: 500;
      color: var(--accent-color);
      margin-bottom: 1.5rem;
      letter-spacing: -0.01em;
      padding-right: 8rem;
    }
    
    .text-content {
      line-height: 2;
      color: #d4d4d4;
      font-size: 1rem;
    }
    
    .text-content p {
      margin-bottom: 1.5rem;
      line-height: 2;
    }
    
    .gap {
      display: inline-block;
      min-width: 64px;
      max-width: 100px;
      padding: 0.375rem 0.625rem;
      margin: 0 0.25rem;
      border: none;
      border-bottom: 2px solid transparent;
      background: transparent;
      color: #d4d4d4;
      font-weight: 400;
      font-size: 0.9375rem;
      font-family: inherit;
      outline: none;
      transition: all 0.2s;
      text-align: center;
      position: relative;
    }
    
    .gap::before {
      content: attr(data-gap);
      position: absolute;
      top: -1.25rem;
      left: 50%;
      transform: translateX(-50%);
      font-size: 0.625rem;
      color: #525252;
      opacity: 0;
      transition: opacity 0.2s;
    }
    
    .gap:hover::before,
    .gap:focus::before {
      opacity: 1;
    }
    
    .gap.empty {
      background: var(--accent-bg-light);
      border-radius: 0.25rem;
      border-bottom: 2px solid var(--accent-border);
    }
    
    .gap:focus {
      border-bottom-color: var(--accent-color);
      background: var(--accent-bg-light);
      border-radius: 0.25rem;
    }
    
    .gap.filled {
      color: #7dd3fc;
      border-bottom-color: rgba(125, 211, 252, 0.3);
    }
    
    .gap.correct {
      color: #10b981;
      border-bottom-color: #10b981;
      background: rgba(16, 185, 129, 0.1);
      border-radius: 0.25rem;
      font-weight: 500;
    }
    
    .gap.incorrect {
      color: #fb923c;
      border-bottom-color: #fb923c;
      background: rgba(251, 146, 60, 0.15);
      border-radius: 0.25rem;
      font-weight: 500;
    }
    
    .gap.key-shown {
      color: #10b981;
      border-bottom-color: #10b981;
      background: rgba(16, 185, 129, 0.1);
      border-radius: 0.25rem;
      font-weight: 500;
      position: relative;
    }
    
    .gap.key-shown::after {
      content: attr(data-correct);
      position: absolute;
      bottom: -1.5rem;
      left: 50%;
      transform: translateX(-50%);
      font-size: 0.75rem;
      color: #10b981;
      background: rgba(16, 185, 129, 0.15);
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      white-space: nowrap;
      pointer-events: none;
      font-weight: 500;
      border: 1px solid rgba(16, 185, 129, 0.3);
    }
    
    .footer {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 0.875rem 1rem;
      background: rgba(10, 10, 10, 0.95);
      border-top: 1px solid rgba(64, 64, 64, 0.2);
      display: none;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      font-size: 0.8125rem;
      z-index: 900;
      opacity: 0;
      transform: translateY(100%);
      transition: all 0.3s;
    }
    
    .footer.visible {
      display: flex;
      opacity: 1;
      transform: translateY(0);
    }
    
    .footer button {
      color: #a3a3a3;
      background: transparent;
      border: none;
      cursor: pointer;
      transition: all 0.2s;
      padding: 0.5rem 0.875rem;
      border-radius: 0.25rem;
      font-size: 0.8125rem;
    }
    
    .footer button:hover { 
      color: #d4d4d4;
      background: rgba(64, 64, 64, 0.2);
    }
    
    .footer button.primary {
      background: var(--accent-bg);
      color: var(--accent-color);
      font-weight: 500;
    }
    
    .footer button.primary:hover {
      background: var(--accent-bg-hover);
    }
    
    .footer button.key-active {
      background: rgba(16, 185, 129, 0.15);
      color: #10b981;
      font-weight: 500;
    }
    
    .modal-overlay {
      display: none;
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0, 0, 0, 0.85);
      z-index: 1000;
      align-items: center;
      justify-content: center;
      padding: 1rem;
    }
    
    .modal-overlay.active {
      display: flex;
    }
    
    .modal {
      background: rgba(23, 23, 23, 0.98);
      border: 1px solid rgba(64, 64, 64, 0.3);
      border-radius: 0.75rem;
      padding: 2rem;
      max-width: 480px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
    }
    
    .modal-header { text-align: center; margin-bottom: 1.5rem; }
    .modal-title { font-size: 1.5rem; font-weight: 500; color: #f5f5f5; }
    .modal-subtitle { font-size: 0.875rem; color: #737373; margin-top: 0.5rem; }
    
    .score-display {
      text-align: center;
      padding: 1.5rem 1rem;
      background: rgba(38, 38, 38, 0.4);
      border-radius: 0.75rem;
      margin-bottom: 1.25rem;
    }
    
    .score-number {
      font-size: 3rem;
      font-weight: 600;
      color: var(--accent-color);
    }
    
    .answers-section {
      margin-top: 1.25rem;
      background: rgba(38, 38, 38, 0.3);
      border-radius: 0.75rem;
      padding: 0.75rem;
      max-height: 300px;
      overflow-y: auto;
    }
    
    .answer-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.625rem 0.75rem;
      margin-bottom: 0.375rem;
      background: rgba(64, 64, 64, 0.2);
      border-radius: 0.375rem;
      font-size: 0.875rem;
      gap: 0.75rem;
      border-left: 2px solid transparent;
    }
    
    .answer-item.correct { border-left-color: #10b981; }
    .answer-item.incorrect { border-left-color: #fb923c; }
    
    .modal-footer { display: flex; gap: 0.75rem; margin-top: 1.25rem; }
    
    .modal-btn {
      flex: 1;
      padding: 0.75rem;
      border: none;
      border-radius: 0.5rem;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .modal-btn-primary { 
      background: var(--accent-bg); 
      color: var(--accent-color);
      border: 1px solid var(--accent-border);
    }
    .modal-btn-primary:hover {
      background: var(--accent-bg-hover);
    }
    .modal-btn-secondary { 
      background: rgba(64, 64, 64, 0.3); 
      color: #a3a3a3; 
      border: 1px solid rgba(64, 64, 64, 0.2);
    }
    .modal-btn-secondary:hover {
      background: rgba(64, 64, 64, 0.4);
      color: #d4d4d4;
    }
    
    .toast {
      position: fixed;
      bottom: 5.5rem;
      left: 50%;
      transform: translateX(-50%) translateY(100px);
      background: rgba(23, 23, 23, 0.98);
      color: #d4d4d4;
      padding: 0.625rem 1.25rem;
      border-radius: 0.5rem;
      border: 1px solid rgba(64, 64, 64, 0.3);
      font-size: 0.8125rem;
      z-index: 1100;
      opacity: 0;
      transition: all 0.3s;
    }
    
    .toast.show {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  </style>
</head>
<body>
  <div class="color-picker">
    <div class="color-picker-label">2026 Themes</div>
    <div class="color-options">
      <button class="color-option neon-orange active" onclick="setTheme('neon-orange', '#FF8C42')" title="Neon Orange"></button>
      <button class="color-option neon-blue" onclick="setTheme('neon-blue', '#4A9EFF')" title="Neon Blue"></button>
      <button class="color-option lilac" onclick="setTheme('lilac', '#C8A2E0')" title="Lilac"></button>
      <button class="color-option sage" onclick="setTheme('sage', '#A8C5A4')" title="Sage"></button>
      <button class="color-option desert" onclick="setTheme('desert', '#c9a88a')" title="Desert"></button>
    </div>
  </div>

  <div class="top-nav">
    <a href="../../../index.html" class="nav-link">← Home</a>
    <div class="dataset-selector">
      <button class="dataset-btn" onclick="toggleDatasetMenu()">Select Type ▾</button>
      <div class="dataset-dropdown" id="datasetDropdown">
        <button class="dataset-option active">8 Gaps</button>
        <button class="dataset-option">12 Gaps</button>
        <button class="dataset-option">15 Gaps</button>
      </div>
    </div>
  </div>

  <div class="container">
    <div class="header">
      <h1>INTUITY</h1>
      <p class="subtitle">Gap-Fill Practice · B2 Level</p>
      <p class="author">by Majid Nashtai</p>
    </div>

    <div class="test-nav">
      <button class="nav-arrow" id="prevArrow" onclick="navigateTest(-1)">←</button>
      <div class="dots-container" id="dotsContainer"></div>
      <button class="nav-arrow" id="nextArrow" onclick="navigateTest(1)">→</button>
    </div>

    <div class="test-info" id="testInfo">Test 1 of 2</div>

    <div class="content-container" id="container"></div>

    <div class="footer" id="footer">
      <button onclick="showHint()">Hint</button>
      <button onclick="showAnswers()" id="showKeyBtn">Key</button>
      <button onclick="repeatTest()">Clear</button>
      <button class="primary" onclick="submitAndScore()">Submit</button>
    </div>
  </div>

  <div class="modal-overlay" id="scoreModal">
    <div class="modal">
      <div class="modal-header">
        <h2 class="modal-title">Results</h2>
        <div class="modal-subtitle" id="modalSubtitle"></div>
      </div>
      <div class="score-display">
        <div class="score-number" id="scoreNumber">0/0</div>
      </div>
      <div class="answers-section" id="answersDisplay"></div>
      <div class="modal-footer">
        <button class="modal-btn modal-btn-secondary" onclick="closeModal()">Close</button>
        <button class="modal-btn modal-btn-primary" onclick="nextTest()">Next</button>
      </div>
    </div>
  </div>

  <div class="toast" id="toast"></div>

  <script>
    const DEMO_DATA = {
      exercises: [
        {
          title: "The Digital Revolution",
          text: "The internet has {{1}} transformed how we communicate. Social media platforms have become {{2}} tools for connecting people. However, experts warn that excessive screen time can {{3}} affect our mental health. Many researchers believe that finding a healthy {{4}} between online and offline activities is essential.\n\nDigital technology has revolutionized the workplace. Remote work has become increasingly {{5}}, allowing employees flexibility. This has {{6}} benefits, including reduced commuting time. Nevertheless, some companies worry that {{7}} face-to-face interaction might harm team cohesion. The challenge is to {{8}} the advantages while maintaining strong relationships.",
          gaps: { "1": "fundamentally", "2": "powerful", "3": "negatively", "4": "balance", "5": "common", "6": "numerous", "7": "lacking", "8": "preserve" }
        },
        {
          title: "Climate Change",
          text: "Climate change represents one of the most {{1}} challenges today. Rising temperatures are causing {{2}} weather patterns. Scientists {{3}} that immediate action is necessary.\n\nGovernments are implementing policies to {{4}} carbon emissions. Renewable energy is becoming more {{5}} and accessible. Individual actions also {{6}} to the solution. While the {{7}} seems daunting, collective effort can make a significant {{8}} in protecting our planet.",
          gaps: { "1": "pressing", "2": "extreme", "3": "emphasize", "4": "reduce", "5": "affordable", "6": "contribute", "7": "task", "8": "difference" }
        }
      ]
    };

    let allTests = DEMO_DATA.exercises;
    let currentTest = 0;
    let userAnswers = {};
    let showingResults = false;
    let answersVisible = false;
    let testScores = {};

    function setTheme(name, color) {
      document.querySelectorAll('.color-option').forEach(b => b.classList.remove('active'));
      event.target.classList.add('active');
      document.documentElement.style.setProperty('--accent-color', color);
      document.documentElement.style.setProperty('--accent-bg', hexToRgba(color, 0.15));
      document.documentElement.style.setProperty('--accent-bg-light', hexToRgba(color, 0.08));
      document.documentElement.style.setProperty('--accent-bg-hover', hexToRgba(color, 0.25));
      document.documentElement.style.setProperty('--accent-border', hexToRgba(color, 0.3));
      document.documentElement.style.setProperty('--accent-glow', hexToRgba(color, 0.6));
    }

    function hexToRgba(hex, alpha) {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    function sanitize(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    function normalize(answer) {
      return answer.toLowerCase().trim().replace(/\s+/g, ' ');
    }

    function answersMatch(user, correct) {
      return normalize(user) === normalize(correct);
    }

    function showToast(msg) {
      const toast = document.getElementById('toast');
      toast.textContent = msg;
      toast.classList.add('show');
      setTimeout(() => toast.classList.remove('show'), 2500);
    }

    function init() {
      createDots();
      loadTest(0);
    }

    function createDots() {
      const container = document.getElementById('dotsContainer');
      container.innerHTML = '';
      for (let i = 0; i < allTests.length; i++) {
        const dot = document.createElement('button');
        dot.className = 'test-dot';
        if (i === currentTest) dot.classList.add('current');
        const score = testScores[`test${i}`];
        if (score) {
          const pct = score.percentage;
          if (pct === 100) {
            dot.classList.add('perfect');
            dot.innerHTML = '<span class="star-badge">⭐</span>';
          } else if (pct >= 75) dot.classList.add('excellent');
          else if (pct >= 60) dot.classList.add('good');
          else if (pct >= 50) dot.classList.add('fair');
          else dot.classList.add('poor');
        }
        dot.onclick = () => goToTest(i);
        container.appendChild(dot);
      }
    }

    function loadTest(idx) {
      currentTest = idx;
      showingResults = false;
      answersVisible = false;
      userAnswers = {};
      renderTest();
      updateTestInfo();
      updateNavButtons();
      updateFooter();
    }

    function renderTest() {
      const test = allTests[currentTest];
      const container = document.getElementById('container');
      
      let html = `<div class="text-title">${sanitize(test.title)}</div><div class="text-content">`;
      
      const paragraphs = test.text.split('\n\n');
      paragraphs.forEach(para => {
        let paraHtml = sanitize(para);
        const matches = para.match(/\{\{(\d+)\}\}/g);
        
        if (matches) {
          matches.forEach(match => {
            const num = match.match(/\d+/)[0];
            const value = userAnswers[num] || '';
            const correct = test.gaps[num] || '';
            
            let cls = 'gap';
            let displayValue = sanitize(value);
            let readonly = showingResults || answersVisible;
            
            if (!value && !showingResults && !answersVisible) cls += ' empty';
            
            if (showingResults) {
              cls += answersMatch(value, correct) ? ' correct' : ' incorrect';
            } else if (answersVisible) {
              cls += ' key-shown';
              displayValue = sanitize(correct);
            } else if (value) {
              cls += ' filled';
            }
            
            const input = `<input type="text" class="${cls}" data-gap="${num}" value="${displayValue}" ${readonly ? 'readonly' : ''} autocomplete="off" spellcheck="false">`;
            paraHtml = paraHtml.replace(`{{${num}}}`, input);
          });
        }
        html += `<p>${paraHtml}</p>`;
      });
      
      html += '</div>';
      container.innerHTML = html;
      attachListeners();
    }

    function attachListeners() {
      document.querySelectorAll('.gap').forEach(input => {
        if (!showingResults && !answersVisible) {
          input.addEventListener('input', function() {
            const num = this.dataset.gap;
            userAnswers[num] = this.value.trim();
            if (this.value.trim()) {
              this.classList.remove('empty');
              this.classList.add('filled');
            } else {
              this.classList.add('empty');
              this.classList.remove('filled');
              delete userAnswers[num];
            }
            updateFooter();
          });
        }
      });
    }

    function updateTestInfo() {
      const test = allTests[currentTest];
      const total = Object.keys(test.gaps).length;
      const filled = Object.keys(userAnswers).filter(k => userAnswers[k]).length;
      document.getElementById('testInfo').textContent = `Test ${currentTest + 1} of ${allTests.length} • ${filled}/${total} answered`;
    }

    function updateNavButtons() {
      document.getElementById('prevArrow').disabled = currentTest === 0;
      document.getElementById('nextArrow').disabled = currentTest === allTests.length - 1;
    }

    function updateFooter() {
      const test = allTests[currentTest];
      const total = Object.keys(test.gaps).length;
      const filled = Object.keys(userAnswers).filter(k => userAnswers[k]).length;
      const footer = document.getElementById('footer');
      if (filled === total || showingResults) {
        footer.classList.add('visible');
      } else {
        footer.classList.remove('visible');
      }
      updateTestInfo();
    }

    function showHint() {
      if (showingResults || answersVisible) {
        showToast('Hints not available in review mode');
        return;
      }
      const test = allTests[currentTest];
      const emptyGaps = Object.keys(test.gaps).filter(num => !userAnswers[num]);
      if (emptyGaps.length === 0) {
        showToast('All gaps are filled');
        return;
      }
      const randomGap = emptyGaps[Math.floor(Math.random() * emptyGaps.length)];
      const correctAnswer = test.gaps[randomGap];
      const hint = correctAnswer.charAt(0);
      const input = document.querySelector(`input[data-gap="${randomGap}"]`);
      if (input) {
        input.focus();
        showToast(`Gap ${randomGap}: Starts with "${hint.toUpperCase()}"`);
      }
    }

    function repeatTest() {
      userAnswers = {};
      showingResults = false;
      answersVisible = false;
      renderTest();
      updateFooter();
      updateKeyButton();
      showToast('Cleared');
    }

    function navigateTest(direction) {
      const newTest = currentTest + direction;
      if (newTest >= 0 && newTest < allTests.length) {
        goToTest(newTest);
      }
    }

    function goToTest(idx) {
      loadTest(idx);
      createDots();
    }

    function showAnswers() {
      answersVisible = !answersVisible;
      updateKeyButton();
      renderTest();
      showToast(answersVisible ? 'Key revealed - see answers below gaps' : 'Key hidden');
    }
    
    function showKeyHints() {
      document.querySelectorAll('.gap').forEach(input => {
        const correct = input.dataset.correct;
        if (correct && !input.value) {
          input.classList.add('key-shown');
        } else if (input.value) {
          input.classList.add('key-shown');
        }
      });
    }

    function updateKeyButton() {
      const btn = document.getElementById('showKeyBtn');
      if (answersVisible) {
        btn.classList.add('key-active');
      } else {
        btn.classList.remove('key-active');
      }
    }

    function submitAndScore() {
      const test = allTests[currentTest];
      let correct = 0;
      const total = Object.keys(test.gaps).length;
      Object.keys(test.gaps).forEach(num => {
        const userAns = userAnswers[num] || '';
        const correctAns = test.gaps[num] || '';
        if (answersMatch(userAns, correctAns)) correct++;
      });
      const percentage = Math.round((correct / total) * 100);
      
      testScores[`test${currentTest}`] = { correct, total, percentage };
      showingResults = true;
      renderTest();
      createDots();
      showResultsModal(test, correct, total, percentage);
    }

    function showResultsModal(test, correct, total, percentage) {
      document.getElementById('modalSubtitle').textContent = `${test.title} • Test ${currentTest + 1}`;
      document.getElementById('scoreNumber').textContent = `${correct}/${total}`;
      
      const answersDisplay = document.getElementById('answersDisplay');
      let html = '';
      
      if (percentage === 100) {
        html += '<div style="text-align: center; padding: 1.25rem; font-size: 1.25rem; color: #84cc16; font-weight: 500;">Perfect Score ⭐</div>';
      } else if (percentage >= 75) {
        html += '<div style="text-align: center; padding: 1.25rem; font-size: 1.125rem; color: #86efac; font-weight: 500;">Great Job</div>';
      } else if (percentage >= 60) {
        html += '<div style="text-align: center; padding: 1.25rem; color: #7dd3fc; font-weight: 500;">Good Effort</div>';
      } else if (percentage >= 50) {
        html += '<div style="text-align: center; padding: 1.25rem; color: #fb923c;">Keep Practicing</div>';
      } else {
        html += '<div style="text-align: center; padding: 1.25rem; color: #ef4444;">Review & Try Again</div>';
      }
      
      Object.keys(test.gaps).sort((a, b) => parseInt(a) - parseInt(b)).forEach(num => {
        const userAns = userAnswers[num] || '';
        const correctAns = test.gaps[num];
        const isCorrect = answersMatch(userAns, correctAns);
        
        html += `
          <div class="answer-item ${isCorrect ? 'correct' : 'incorrect'}">
            <span>Gap ${num}: <strong>${sanitize(userAns) || '(empty)'}</strong></span>
            ${!isCorrect ? `<span>→ ${sanitize(correctAns)}</span>` : '<span>✓</span>'}
          </div>
        `;
      });
      
      answersDisplay.innerHTML = html;
      document.getElementById('scoreModal').classList.add('active');
    }

    function closeModal() {
      document.getElementById('scoreModal').classList.remove('active');
    }

    function nextTest() {
      closeModal();
      if (currentTest < allTests.length - 1) {
        goToTest(currentTest + 1);
      }
    }

    function toggleDatasetMenu() {
      const dropdown = document.getElementById('datasetDropdown');
      dropdown.classList.toggle('active');
    }

    document.getElementById('scoreModal').addEventListener('click', function(e) {
      if (e.target === this) closeModal();
    });

    document.addEventListener('click', function(e) {
      const dropdown = document.getElementById('datasetDropdown');
      const selector = document.querySelector('.dataset-selector');
      if (dropdown && selector && !selector.contains(e.target)) {
        dropdown.classList.remove('active');
      }
    });

    window.addEventListener('load', init);
  </script>
</body>
</html>
